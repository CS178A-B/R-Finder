# Generated by Django 2.2.13 on 2021-03-08 00:02

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=1500)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=150)),
                ('abbrev', models.CharField(max_length=50)),
                ('grade', models.CharField(blank=True, default='', max_length=3, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(default='', max_length=50)),
                ('profile_completeness', models.IntegerField(default=0)),
                ('comments_made', models.ManyToManyField(blank=True, default=0, to='account.Comment')),
                ('courses_taught', models.ManyToManyField(blank=True, default=0, to='account.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=150)),
                ('posted_date', models.DateField(verbose_name=datetime.date(2021, 3, 8))),
                ('hourly_salary', models.FloatField(blank=True, default=10, max_length=10)),
                ('hours_per_week', models.IntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major', models.CharField(default='', max_length=50)),
                ('GPA', models.FloatField(blank=True, default=0, null=True)),
                ('profile_completeness', models.IntegerField(default=0)),
                ('resume_pdf', models.FileField(blank=True, null=True, upload_to='pdf')),
                ('transcript', models.FileField(blank=True, null=True, upload_to='pdf')),
                ('applied_positions', models.ManyToManyField(blank=True, default=0, to='account.Job')),
                ('comments_recv', models.ManyToManyField(blank=True, default=0, to='account.Comment')),
                ('course_taken', models.ManyToManyField(blank=True, default=0, to='account.Course')),
            ],
        ),
        migrations.AddField(
            model_name='job',
            name='applicants',
            field=models.ManyToManyField(blank=True, default=0, to='account.Student'),
        ),
        migrations.AddField(
            model_name='job',
            name='course_req',
            field=models.ManyToManyField(blank=True, default=0, to='account.Course'),
        ),
        migrations.AddField(
            model_name='job',
            name='poster',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.Faculty'),
        ),
        migrations.AddField(
            model_name='faculty',
            name='posted_jobs',
            field=models.ManyToManyField(blank=True, to='account.Job'),
        ),
        migrations.AddField(
            model_name='comment',
            name='commenter',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.Faculty'),
        ),
        migrations.AddField(
            model_name='comment',
            name='course',
            field=models.ManyToManyField(blank=True, default=0, to='account.Course'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('is_faculty', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.Faculty')),
                ('is_student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='account.Student')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
